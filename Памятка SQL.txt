SELET - первое слово в запросе. 
SELECT ("поле1"+"поле2") - склеит эти поля в одно.Любой математический знак
SELECT "имя столбца" псевдоним - таблица выведется с названием "псевдоним"
SELECT п."имя столбца" - и дальше мы в это запрсое можем обращаться к табилце как к п

IF - как и в джаве. после SELECT. В условии можно использовать AND и OR
SELECT * from `ex`
IF ( 
     `условие`,
	 `что писать, если выполнилось`,
	 `что писать, если не выполнилось`)
	 `название столбца, куда это будет выводитсья
	 
CASE - похож на switch-case
S*``
CASE
    WHEN `услвоие` THEN `вывод`
	WHEN `услвоие` THEN `вывод`
	ELSE `вывод`               -----если не выполнились оба`
	END `название столбца, куда это будет выводитсья

FROM  - указатель из какой таблицы
SELECT * FROM 'название таблицы'; - ПРИМЕР. Вызов всех полей из таблицы ''  - ВАЖНО возможно ковычки обратные(тильда?) название полей лучше писать в одинарных ковычках. Можно без них, но если будет совпадение название не сработает

AS - в новой таблице, которую мы вызываем, поле будет переименовано
SELECT "старое название AS "новое название" - ПРИМЕР
SELECT ("поле1"+"поле2") AS "новое поел" - склеит эти поля в одно.Любой математический знак

WHERE - условие для выборки из множества полей.
SELECT 'count' FROM 'good' WHERE 'count=0' - выведет только те поля, в которых count=0


AND
WHERE 'одно условие' AND 'второе условие' - для обозначения диапазовнов
WHERE BETWEEN 'одно условие' AND 'второе условие'  - слово BETWEEN заменяет условия >= и <= для 
IS NULL и IS NOT NULL - ставится после WEHERE.

LIKE - обозначает символы, которые мы ищем
SELECT 'name' FROM 'users' WHERE 'name' LIKE 'Игорь' - выдаст всех игорей. это МАСКИ
_ - обозначает один любой символ
% - множество символов
Достаточной гибка штука : '% ор%' , '%  ор  %' учитывает пробелы и символы и их колчиество
SELECT 'name' FROM 'users' WHERE 'name' LIKE '%ор%' - выдаст всех, у кого в имени есть "ор" (Шмыгорь,Штопор, Игорь)

   OR - или.Используется в связке с LIKE
   IN - для обозначения множества. IN(5,6,7) - выдаст всё, что соответсвует хоть одному

ORDER BY -указатель сортировки
SELECT * FROM 'чашки' ORDER BY 'количество'(можно через запятую указывать несколько полей.После полей ещё и модификатор типо АСК можно) ASC - отсортировать поле "чашки" по полю "количество"
   ASC - по возрастанию
   DESC - по убыванию

LIMIT - ограничение на количество запросов.
SELECT * FROM 'чашки' ORDER BY 'количество' ASC LIMIT 100 - 100 самых дешевых
SELECT * FROM 'чашки' ORDER BY 'количество' ASC LIMIT 20,30 - выдаст с 20 номер 30 штук. НЕ С  20 ПО 30, а с 20 30 шт.т.е.  20-50

(INNER) JOIN - объеденение данных из полей таблиц. Иннер -дефолтный джоин. Выдаст только те поля, которые совпали в обеих таблицах
SELECT * FROM "товар" JOIN "категории товаров" ON 'категории товаров"."id(товаров)" = "товар"."id категории товаров" - присоединяем таблицу "Катеогрии товаров" к таблице "товар" такии образом чтоб значние ИД в таблице "категории товаров" было равно "категории товаров " в табилце "Товар"
LEFT JOIN    - выведет ввсе из левой, а из второй только те, что есть в левой
RIGHT JOIN   - наоборот

DISTINCT - выыводит уникальные связи
SELECT DISTINCT "первый столбец", "второей столбец" FROM "название таблицы" - выведдет уникальные связи между столбцами

GROUP BY -группировка по 
SELECT "первый столбец", "второей столбец" FROM "название таблицы" GROUP BY "первый столбец" - выведет таблицу с уникальными значениями только по столбцу1. По второму будут все

HAVING -как WHERE, но работает в связке с GROUP BY и может работать с агрегирующими фукнкциями

UNION - пишется между селектами. Сращивает таблицы в одну. УСЛОВИЕ - в таблицах должны быть одинаковые наборы полей

INSERT = вставка
  синтаксис: 
       INSERT INTO `таблица` (
	                `название поля`, (если не указать, а оно там есть, вставиться значение по умолчани)
					`название другого поля`
					)
					VALUES (
					числовое значение без ковычек,
					`значение в ковычках`
					)                                 можно вставить несколько строк-полей. Кажое поле в в VALUESd в своих скобках

UPDATE  - изменение в полях
UPDATE "имя таблицы" SET `имя столбца` = `значение, которое нужно` WHERE `идентификатор поля-сроки` = `значение идентифыикатора`;


DELETE  - удаление записе	 из таблицы
DELETE FROM `имя таблицы` WHERE `идентификатор поля-сроки` = `значение идентифыикатора`

CREATE TABLE - новой таблицы.
CREATE TABLE `имя` ( `id(столбец)` его тип(INT, VARCHAR и др) и его параметры (NOT NULL< AUTO_INCREMENT и др.),
                     PRIMARY KEY(`id`) ); - индекс-ключ. Может быть несколько, для каждого поля

ALTER TABLE - измение таблицы
ALTER TABLE `имя т` ADD  KEY (```); - добавление индекса-ключа


КЛЮЧИ:
ADD CONSTRAINT ``- дать имя ключу в момент создания
PRIMARY KEY - первичный ключ. В отличии от UNIQUE не может быть NULL  и один на всю табилцу.
KEY  -  обычный
UNIQUE - в поле будут только уникальные значения. Повторы не добавятся
FOREIGN KEY  -внешний ключ. Используется с REFERENCES``(``).ПРИМЕР: ALTER TABLE `good` ADD FOREIGN KEY (`catogory_id`) REFERENCES `good_category`(`id`);
DROP INDEX `` - удаление ключа

ЦЕЛОСТНОСТЬ:
RESTRICT/NI ACTION  - отменяет действие, если оно нарушет целосность
CASCADE - при удалении/измениии поля со связями, удалит/изменит все связанные с ним поля
SET NULL - замещает удаленные/изменные связи на NULL 

ФУНКЦИИ :
строки
CHAR_LENGTH(`имя столбца`) `название` - определение длины строки
SUBSTRING (str,start,length) - пример (кофе, 2 , 2 ) "ке"
CONCAT(str,str,str...) - (строка,строка)->строкастрока
GROUP_CONCAT(o.name)- будет склеивать через запятую. Ещё можно в скобках после объекта написать слово SEPARATOR ''. По умолчанию тут ","
TRIM(str) - удалчет лишние пробелы. GROUP_CONCAT(TRIM(o.name) SEPARATOR ', ')
REPLACE (поле, что убрать, на что)

ВРемяДата
DATE_FORMAT(поле, '%d.%m.%.Y') - изменяет формат даты
DAYEOFWEEK(date)
DAYOFYEAR(date)
NOW()
CURDATE() - текущая дата
DATEDIFF(ранняя дата, поздня дата) 
UNIX_TIMESTAMP(date) 
FROM_UNIXTINE(timestamp)

АГРЕГАТНЫЕ
COUNT() - кол-во
SUM() - сумма 
MAX()
MIN()
AVG() - среднее

УПРАВЛЕНИЕ ТАБЛИЦАМИ:
SHOW DATABASE - показать табилцу
USE ``  - начать работать с табилцей
CREATE DATABASE `` - 
DROP DATABASE - удалените

SHOW TABLES  - столбы списком
DESCRIBE `tablename` -структура таблицы
CREATE TABLE ``(всё о полях)
ALTER TABLE `` - изменения таблицы
        DROP COLUMN ``, - снести столб
        ADD `` условия -создать
        AFTER ``;      - после какого. Наверно есть и слвоо BEFOR
        TRUNCATE ``  - очищение таблицы. Он ещё сбрасывает индекс автоинкремента(примар ки)
DROP TABLE ``  - удаление таблицы

